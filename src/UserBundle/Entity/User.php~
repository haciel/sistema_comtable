<?php

namespace UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Entity\User as BaseUser;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints as DoctrineAssert;

/**
 * User
 *
 * @ORM\Table(name="fos_user")
 * @ORM\Entity(repositoryClass="UserBundle\Repository\UserRepository")
 * @DoctrineAssert\UniqueEntity(fields={"username"},message="Este nombre de usuario ya está en uso.")
 * @DoctrineAssert\UniqueEntity(fields={"email"},message="Esta dirección de correo ya está en uso.")
 */
class User extends BaseUser
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="lastname", type="string", length=255)
     */
    private $lastname;

    /**
     * @var string
     *
     * @ORM\Column(name="phone", type="string", length=255)
     */
    private $phone;

    /**
     * @var string
     *
     * @ORM\Column(name="dni", type="string", length=255)
     */
    private $dni;


    /**
     * @var Institution
     *
     * @ORM\ManyToOne(targetEntity="BackendBundle\Entity\Institution", inversedBy="companies", cascade={"persist"})
     * @ORM\JoinColumn(name="institution_id", referencedColumnName="id", onDelete="CASCADE")
     * @Assert\NotNull()
     */
    private $institutionId;

    /**
     * @var EducationalLevel
     *
     * @ORM\ManyToOne(targetEntity="BackendBundle\Entity\EducationalLevel", inversedBy="users", cascade={"persist"})
     * @ORM\JoinColumn(name="educationallevel_id", referencedColumnName="id", onDelete="CASCADE")
     * @Assert\NotNull()
     */
    private $educationallevelId;

    /**
     * @var city
     *
     * @ORM\ManyToOne(targetEntity="BackendBundle\Entity\City", inversedBy="users", cascade={"persist"})
     * @ORM\JoinColumn(name="city_id", referencedColumnName="id", onDelete="CASCADE")
     * @Assert\NotNull()
     */
    private $cityId;

    /**
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="BackendBundle\Entity\Company", mappedBy="userId" ,cascade={"persist"},orphanRemoval=true)
     */
    private $companies;

    /**
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="BackendBundle\Entity\Task", mappedBy="userId" ,cascade={"persist"},orphanRemoval=true)
     */
    private $tasks;

    /**
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="BackendBundle\Entity\AnswerTask", mappedBy="userId" ,cascade={"persist"},orphanRemoval=true)
     */
    private $answer_tasks;

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    public function __construct()
    {
        parent::__construct();
        $this->answer_tasks=new ArrayCollection();
        $this->tasks=new ArrayCollection();
        $this->companies=new ArrayCollection();
        $this->instituciones=new ArrayCollection();
        // your own logic
    }

    /**
     * Remove companies
     *
     * @param \BackendBundle\Entity\Company $companies
     */
    public function removeCompanies(\BackendBundle\Entity\Company $companies)
    {
        $this->companies->removeElement($companies);
    }

    /**
     * Get companies
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCompanies()
    {
        return $this->companies;
    }

    /**
     * Remove tasks
     *
     * @param \BackendBundle\Entity\Task $tasks
     */
    public function removeTasks(\BackendBundle\Entity\Task $tasks)
    {
        $this->tasks->removeElement($tasks);
    }

    /**
     * Get tasks
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTasks()
    {
        return $this->tasks;
    }

    /**
     * Remove answer_tasks
     *
     * @param \BackendBundle\Entity\AnswerTask $answer_tasks
     */
    public function removeAnswer_tasks(\BackendBundle\Entity\AnswerTask $answer_tasks)
    {
        $this->answer_tasks->removeElement($answer_tasks);
    }

    /**
     * Get answer_tasks
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAnswer_tasks()
    {
        return $this->answer_tasks;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return User
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set lastname
     *
     * @param string $lastname
     * @return User
     */
    public function setLastname($lastname)
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
     * Get lastname
     *
     * @return string 
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Set phone
     *
     * @param string $phone
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string 
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set dni
     *
     * @param string $dni
     * @return User
     */
    public function setDni($dni)
    {
        $this->dni = $dni;

        return $this;
    }

    /**
     * Get dni
     *
     * @return string 
     */
    public function getDni()
    {
        return $this->dni;
    }



    /**
     * Add companies
     *
     * @param \BackendBundle\Entity\Company $companies
     * @return User
     */
    public function addCompany(\BackendBundle\Entity\Company $companies)
    {
        $this->companies[] = $companies;

        return $this;
    }

    /**
     * Remove companies
     *
     * @param \BackendBundle\Entity\Company $companies
     */
    public function removeCompany(\BackendBundle\Entity\Company $companies)
    {
        $this->companies->removeElement($companies);
    }

    /**
     * Add tasks
     *
     * @param \BackendBundle\Entity\Task $tasks
     * @return User
     */
    public function addTask(\BackendBundle\Entity\Task $tasks)
    {
        $this->tasks[] = $tasks;

        return $this;
    }

    /**
     * Remove tasks
     *
     * @param \BackendBundle\Entity\Task $tasks
     */
    public function removeTask(\BackendBundle\Entity\Task $tasks)
    {
        $this->tasks->removeElement($tasks);
    }

    /**
     * Add answer_tasks
     *
     * @param \BackendBundle\Entity\AnswerTask $answerTasks
     * @return User
     */
    public function addAnswerTask(\BackendBundle\Entity\AnswerTask $answerTasks)
    {
        $this->answer_tasks[] = $answerTasks;

        return $this;
    }

    /**
     * Remove answer_tasks
     *
     * @param \BackendBundle\Entity\AnswerTask $answerTasks
     */
    public function removeAnswerTask(\BackendBundle\Entity\AnswerTask $answerTasks)
    {
        $this->answer_tasks->removeElement($answerTasks);
    }

    /**
     * Get answer_tasks
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getAnswerTasks()
    {
        return $this->answer_tasks;
    }

    /**
     * Set educationallevelId
     *
     * @param \BackendBundle\Entity\EducationalLevel $educationallevelId
     * @return User
     */
    public function setEducationallevelId(\BackendBundle\Entity\EducationalLevel $educationallevelId = null)
    {
        $this->educationallevelId = $educationallevelId;

        return $this;
    }

    /**
     * Get educationallevelId
     *
     * @return \BackendBundle\Entity\EducationalLevel 
     */
    public function getEducationallevelId()
    {
        return $this->educationallevelId;
    }

    /**
     * Set cityId
     *
     * @param \BackendBundle\Entity\City $cityId
     * @return User
     */
    public function setCityId(\BackendBundle\Entity\City $cityId = null)
    {
        $this->cityId = $cityId;

        return $this;
    }

    /**
     * Get cityId
     *
     * @return \BackendBundle\Entity\City 
     */
    public function getCityId()
    {
        return $this->cityId;
    }

}
